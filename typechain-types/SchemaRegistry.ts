/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SchemaRegistry {
  export type CredentialSchemaStruct = {
    name: string;
    description: string;
    schemaHash: string;
    issuerDID: string;
    version: string;
    created: BigNumberish;
    updated: BigNumberish;
    active: boolean;
    owner: AddressLike;
    schemaType: BigNumberish;
    dependencies: string[];
  };

  export type CredentialSchemaStructOutput = [
    name: string,
    description: string,
    schemaHash: string,
    issuerDID: string,
    version: string,
    created: bigint,
    updated: bigint,
    active: boolean,
    owner: string,
    schemaType: bigint,
    dependencies: string[]
  ] & {
    name: string;
    description: string;
    schemaHash: string;
    issuerDID: string;
    version: string;
    created: bigint;
    updated: bigint;
    active: boolean;
    owner: string;
    schemaType: bigint;
    dependencies: string[];
  };
}

export interface SchemaRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deactivateSchema"
      | "getSchema"
      | "getSchemaDependencies"
      | "getSchemaIdByName"
      | "getSchemasByIssuer"
      | "getSchemasByType"
      | "getTotalSchemaCount"
      | "hasCircularDependencies"
      | "issuerSchemas"
      | "registerSchema"
      | "schemaExists"
      | "schemaNameToId"
      | "schemas"
      | "transferSchema"
      | "updateSchema"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SchemaDeactivated"
      | "SchemaRegistered"
      | "SchemaTransferred"
      | "SchemaUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deactivateSchema",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchema",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchemaDependencies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchemaIdByName",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchemasByIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchemasByType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSchemaCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasCircularDependencies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerSchemas",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSchema",
    values: [string, string, string, string, string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "schemaExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "schemaNameToId",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "schemas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSchema",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSchema",
    values: [BigNumberish, string, string, string, string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "deactivateSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSchema", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSchemaDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchemaIdByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchemasByIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchemasByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSchemaCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCircularDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issuerSchemas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "schemaExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "schemaNameToId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schemas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSchema",
    data: BytesLike
  ): Result;
}

export namespace SchemaDeactivatedEvent {
  export type InputTuple = [
    schemaId: BigNumberish,
    issuerDID: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    schemaId: bigint,
    issuerDID: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    schemaId: bigint;
    issuerDID: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SchemaRegisteredEvent {
  export type InputTuple = [
    schemaId: BigNumberish,
    issuerDID: string,
    name: string,
    version: string,
    schemaType: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    schemaId: bigint,
    issuerDID: string,
    name: string,
    version: string,
    schemaType: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    schemaId: bigint;
    issuerDID: string;
    name: string;
    version: string;
    schemaType: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SchemaTransferredEvent {
  export type InputTuple = [
    schemaId: BigNumberish,
    issuerDID: string,
    oldOwner: AddressLike,
    newOwner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    schemaId: bigint,
    issuerDID: string,
    oldOwner: string,
    newOwner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    schemaId: bigint;
    issuerDID: string;
    oldOwner: string;
    newOwner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SchemaUpdatedEvent {
  export type InputTuple = [
    schemaId: BigNumberish,
    issuerDID: string,
    newVersion: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    schemaId: bigint,
    issuerDID: string,
    newVersion: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    schemaId: bigint;
    issuerDID: string;
    newVersion: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SchemaRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): SchemaRegistry;
  waitForDeployment(): Promise<this>;

  interface: SchemaRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deactivateSchema: TypedContractMethod<
    [schemaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getSchema: TypedContractMethod<
    [schemaId: BigNumberish],
    [SchemaRegistry.CredentialSchemaStructOutput],
    "view"
  >;

  getSchemaDependencies: TypedContractMethod<
    [schemaId: BigNumberish],
    [string[]],
    "view"
  >;

  getSchemaIdByName: TypedContractMethod<
    [issuerDID: string, name: string],
    [bigint],
    "view"
  >;

  getSchemasByIssuer: TypedContractMethod<
    [issuerDID: string],
    [bigint[]],
    "view"
  >;

  getSchemasByType: TypedContractMethod<
    [schemaType: BigNumberish],
    [bigint[]],
    "view"
  >;

  getTotalSchemaCount: TypedContractMethod<[], [bigint], "view">;

  hasCircularDependencies: TypedContractMethod<
    [schemaId: BigNumberish],
    [boolean],
    "view"
  >;

  issuerSchemas: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  registerSchema: TypedContractMethod<
    [
      name: string,
      description: string,
      schemaHash: string,
      issuerDID: string,
      version: string,
      schemaType: BigNumberish,
      dependencies: string[]
    ],
    [bigint],
    "nonpayable"
  >;

  schemaExists: TypedContractMethod<
    [schemaId: BigNumberish],
    [boolean],
    "view"
  >;

  schemaNameToId: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  schemas: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint
      ] & {
        name: string;
        description: string;
        schemaHash: string;
        issuerDID: string;
        version: string;
        created: bigint;
        updated: bigint;
        active: boolean;
        owner: string;
        schemaType: bigint;
      }
    ],
    "view"
  >;

  transferSchema: TypedContractMethod<
    [schemaId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSchema: TypedContractMethod<
    [
      schemaId: BigNumberish,
      description: string,
      schemaHash: string,
      newVersion: string,
      dependencies: string[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deactivateSchema"
  ): TypedContractMethod<[schemaId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getSchema"
  ): TypedContractMethod<
    [schemaId: BigNumberish],
    [SchemaRegistry.CredentialSchemaStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSchemaDependencies"
  ): TypedContractMethod<[schemaId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSchemaIdByName"
  ): TypedContractMethod<[issuerDID: string, name: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSchemasByIssuer"
  ): TypedContractMethod<[issuerDID: string], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getSchemasByType"
  ): TypedContractMethod<[schemaType: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalSchemaCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasCircularDependencies"
  ): TypedContractMethod<[schemaId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "issuerSchemas"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerSchema"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      schemaHash: string,
      issuerDID: string,
      version: string,
      schemaType: BigNumberish,
      dependencies: string[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "schemaExists"
  ): TypedContractMethod<[schemaId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "schemaNameToId"
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "schemas"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint
      ] & {
        name: string;
        description: string;
        schemaHash: string;
        issuerDID: string;
        version: string;
        created: bigint;
        updated: bigint;
        active: boolean;
        owner: string;
        schemaType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferSchema"
  ): TypedContractMethod<
    [schemaId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSchema"
  ): TypedContractMethod<
    [
      schemaId: BigNumberish,
      description: string,
      schemaHash: string,
      newVersion: string,
      dependencies: string[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SchemaDeactivated"
  ): TypedContractEvent<
    SchemaDeactivatedEvent.InputTuple,
    SchemaDeactivatedEvent.OutputTuple,
    SchemaDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "SchemaRegistered"
  ): TypedContractEvent<
    SchemaRegisteredEvent.InputTuple,
    SchemaRegisteredEvent.OutputTuple,
    SchemaRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "SchemaTransferred"
  ): TypedContractEvent<
    SchemaTransferredEvent.InputTuple,
    SchemaTransferredEvent.OutputTuple,
    SchemaTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SchemaUpdated"
  ): TypedContractEvent<
    SchemaUpdatedEvent.InputTuple,
    SchemaUpdatedEvent.OutputTuple,
    SchemaUpdatedEvent.OutputObject
  >;

  filters: {
    "SchemaDeactivated(uint256,string,uint256)": TypedContractEvent<
      SchemaDeactivatedEvent.InputTuple,
      SchemaDeactivatedEvent.OutputTuple,
      SchemaDeactivatedEvent.OutputObject
    >;
    SchemaDeactivated: TypedContractEvent<
      SchemaDeactivatedEvent.InputTuple,
      SchemaDeactivatedEvent.OutputTuple,
      SchemaDeactivatedEvent.OutputObject
    >;

    "SchemaRegistered(uint256,string,string,string,uint8,uint256)": TypedContractEvent<
      SchemaRegisteredEvent.InputTuple,
      SchemaRegisteredEvent.OutputTuple,
      SchemaRegisteredEvent.OutputObject
    >;
    SchemaRegistered: TypedContractEvent<
      SchemaRegisteredEvent.InputTuple,
      SchemaRegisteredEvent.OutputTuple,
      SchemaRegisteredEvent.OutputObject
    >;

    "SchemaTransferred(uint256,string,address,address,uint256)": TypedContractEvent<
      SchemaTransferredEvent.InputTuple,
      SchemaTransferredEvent.OutputTuple,
      SchemaTransferredEvent.OutputObject
    >;
    SchemaTransferred: TypedContractEvent<
      SchemaTransferredEvent.InputTuple,
      SchemaTransferredEvent.OutputTuple,
      SchemaTransferredEvent.OutputObject
    >;

    "SchemaUpdated(uint256,string,string,uint256)": TypedContractEvent<
      SchemaUpdatedEvent.InputTuple,
      SchemaUpdatedEvent.OutputTuple,
      SchemaUpdatedEvent.OutputObject
    >;
    SchemaUpdated: TypedContractEvent<
      SchemaUpdatedEvent.InputTuple,
      SchemaUpdatedEvent.OutputTuple,
      SchemaUpdatedEvent.OutputObject
    >;
  };
}
