/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DIDRegistry {
  export type DIDDocumentStruct = {
    publicKey: BytesLike;
    created: BigNumberish;
    updated: BigNumberish;
    active: boolean;
    owner: AddressLike;
    documentHash: string;
  };

  export type DIDDocumentStructOutput = [
    publicKey: string,
    created: bigint,
    updated: bigint,
    active: boolean,
    owner: string,
    documentHash: string
  ] & {
    publicKey: string;
    created: bigint;
    updated: bigint;
    active: boolean;
    owner: string;
    documentHash: string;
  };
}

export interface DIDRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deactivateDID"
      | "didExists"
      | "dids"
      | "getDIDCountByOwner"
      | "getDIDsByOwner"
      | "ownerDIDs"
      | "registerDID"
      | "resolveDID"
      | "transferDID"
      | "updateDID"
      | "verifyDIDSignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DIDDeactivated"
      | "DIDRegistered"
      | "DIDTransferred"
      | "DIDUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deactivateDID",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "didExists", values: [string]): string;
  encodeFunctionData(functionFragment: "dids", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDIDCountByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDIDsByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerDIDs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDID",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "resolveDID", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferDID",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDID",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDIDSignature",
    values: [string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deactivateDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDIDCountByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDIDsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerDIDs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolveDID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateDID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyDIDSignature",
    data: BytesLike
  ): Result;
}

export namespace DIDDeactivatedEvent {
  export type InputTuple = [
    did: string,
    owner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, owner: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDRegisteredEvent {
  export type InputTuple = [
    did: string,
    owner: AddressLike,
    publicKey: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    did: string,
    owner: string,
    publicKey: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    did: string;
    owner: string;
    publicKey: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDTransferredEvent {
  export type InputTuple = [
    did: string,
    oldOwner: AddressLike,
    newOwner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    did: string,
    oldOwner: string,
    newOwner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    did: string;
    oldOwner: string;
    newOwner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDUpdatedEvent {
  export type InputTuple = [
    did: string,
    owner: AddressLike,
    newPublicKey: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    did: string,
    owner: string,
    newPublicKey: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    did: string;
    owner: string;
    newPublicKey: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DIDRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DIDRegistry;
  waitForDeployment(): Promise<this>;

  interface: DIDRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deactivateDID: TypedContractMethod<[did: string], [void], "nonpayable">;

  didExists: TypedContractMethod<[did: string], [boolean], "view">;

  dids: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, boolean, string, string] & {
        publicKey: string;
        created: bigint;
        updated: bigint;
        active: boolean;
        owner: string;
        documentHash: string;
      }
    ],
    "view"
  >;

  getDIDCountByOwner: TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "view"
  >;

  getDIDsByOwner: TypedContractMethod<[owner: AddressLike], [string[]], "view">;

  ownerDIDs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  registerDID: TypedContractMethod<
    [did: string, publicKey: BytesLike, documentHash: string],
    [void],
    "nonpayable"
  >;

  resolveDID: TypedContractMethod<
    [did: string],
    [DIDRegistry.DIDDocumentStructOutput],
    "view"
  >;

  transferDID: TypedContractMethod<
    [did: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDID: TypedContractMethod<
    [did: string, newPublicKey: BytesLike, documentHash: string],
    [void],
    "nonpayable"
  >;

  verifyDIDSignature: TypedContractMethod<
    [did: string, messageHash: BytesLike, signature: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deactivateDID"
  ): TypedContractMethod<[did: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "didExists"
  ): TypedContractMethod<[did: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "dids"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, boolean, string, string] & {
        publicKey: string;
        created: bigint;
        updated: bigint;
        active: boolean;
        owner: string;
        documentHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDIDCountByOwner"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDIDsByOwner"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "ownerDIDs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerDID"
  ): TypedContractMethod<
    [did: string, publicKey: BytesLike, documentHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveDID"
  ): TypedContractMethod<
    [did: string],
    [DIDRegistry.DIDDocumentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferDID"
  ): TypedContractMethod<
    [did: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDID"
  ): TypedContractMethod<
    [did: string, newPublicKey: BytesLike, documentHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyDIDSignature"
  ): TypedContractMethod<
    [did: string, messageHash: BytesLike, signature: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "DIDDeactivated"
  ): TypedContractEvent<
    DIDDeactivatedEvent.InputTuple,
    DIDDeactivatedEvent.OutputTuple,
    DIDDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "DIDRegistered"
  ): TypedContractEvent<
    DIDRegisteredEvent.InputTuple,
    DIDRegisteredEvent.OutputTuple,
    DIDRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DIDTransferred"
  ): TypedContractEvent<
    DIDTransferredEvent.InputTuple,
    DIDTransferredEvent.OutputTuple,
    DIDTransferredEvent.OutputObject
  >;
  getEvent(
    key: "DIDUpdated"
  ): TypedContractEvent<
    DIDUpdatedEvent.InputTuple,
    DIDUpdatedEvent.OutputTuple,
    DIDUpdatedEvent.OutputObject
  >;

  filters: {
    "DIDDeactivated(string,address,uint256)": TypedContractEvent<
      DIDDeactivatedEvent.InputTuple,
      DIDDeactivatedEvent.OutputTuple,
      DIDDeactivatedEvent.OutputObject
    >;
    DIDDeactivated: TypedContractEvent<
      DIDDeactivatedEvent.InputTuple,
      DIDDeactivatedEvent.OutputTuple,
      DIDDeactivatedEvent.OutputObject
    >;

    "DIDRegistered(string,address,bytes,uint256)": TypedContractEvent<
      DIDRegisteredEvent.InputTuple,
      DIDRegisteredEvent.OutputTuple,
      DIDRegisteredEvent.OutputObject
    >;
    DIDRegistered: TypedContractEvent<
      DIDRegisteredEvent.InputTuple,
      DIDRegisteredEvent.OutputTuple,
      DIDRegisteredEvent.OutputObject
    >;

    "DIDTransferred(string,address,address,uint256)": TypedContractEvent<
      DIDTransferredEvent.InputTuple,
      DIDTransferredEvent.OutputTuple,
      DIDTransferredEvent.OutputObject
    >;
    DIDTransferred: TypedContractEvent<
      DIDTransferredEvent.InputTuple,
      DIDTransferredEvent.OutputTuple,
      DIDTransferredEvent.OutputObject
    >;

    "DIDUpdated(string,address,bytes,uint256)": TypedContractEvent<
      DIDUpdatedEvent.InputTuple,
      DIDUpdatedEvent.OutputTuple,
      DIDUpdatedEvent.OutputObject
    >;
    DIDUpdated: TypedContractEvent<
      DIDUpdatedEvent.InputTuple,
      DIDUpdatedEvent.OutputTuple,
      DIDUpdatedEvent.OutputObject
    >;
  };
}
