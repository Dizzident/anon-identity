/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace RevocationRegistry {
  export type RevocationListStruct = {
    revokedCredentialIds: BigNumberish[];
    timestamp: BigNumberish;
    signature: BytesLike;
    version: BigNumberish;
    merkleRoot: BytesLike;
  };

  export type RevocationListStructOutput = [
    revokedCredentialIds: bigint[],
    timestamp: bigint,
    signature: string,
    version: bigint,
    merkleRoot: string
  ] & {
    revokedCredentialIds: bigint[];
    timestamp: bigint;
    signature: string;
    version: bigint;
    merkleRoot: string;
  };
}

export interface RevocationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeIssuer"
      | "authorizedIssuers"
      | "deauthorizeIssuer"
      | "getRevocationList"
      | "getRevokedCredentialCount"
      | "isCredentialRevoked"
      | "isCredentialRevokedByHash"
      | "issuerDIDs"
      | "owner"
      | "publishRevocationList"
      | "revocationLists"
      | "revokeCredentials"
      | "revokedCredentials"
      | "transferOwnership"
      | "verifyRevocationProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CredentialRevoked"
      | "IssuerAuthorized"
      | "IssuerDeauthorized"
      | "RevocationListPublished"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedIssuers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevocationList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevokedCredentialCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCredentialRevoked",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCredentialRevokedByHash",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerDIDs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishRevocationList",
    values: [string, BytesLike[], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revocationLists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCredentials",
    values: [string, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokedCredentials",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRevocationProof",
    values: [string, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevocationList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevokedCredentialCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCredentialRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCredentialRevokedByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuerDIDs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishRevocationList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revocationLists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokedCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRevocationProof",
    data: BytesLike
  ): Result;
}

export namespace CredentialRevokedEvent {
  export type InputTuple = [
    issuerHash: BytesLike,
    credentialHash: BytesLike,
    issuerDID: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    issuerHash: string,
    credentialHash: string,
    issuerDID: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    issuerHash: string;
    credentialHash: string;
    issuerDID: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuerAuthorizedEvent {
  export type InputTuple = [
    issuerHash: BytesLike,
    issuerDID: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    issuerHash: string,
    issuerDID: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    issuerHash: string;
    issuerDID: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuerDeauthorizedEvent {
  export type InputTuple = [
    issuerHash: BytesLike,
    issuerDID: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    issuerHash: string,
    issuerDID: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    issuerHash: string;
    issuerDID: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevocationListPublishedEvent {
  export type InputTuple = [
    issuerHash: BytesLike,
    issuerDID: string,
    version: BigNumberish,
    revokedCount: BigNumberish,
    merkleRoot: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    issuerHash: string,
    issuerDID: string,
    version: bigint,
    revokedCount: bigint,
    merkleRoot: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    issuerHash: string;
    issuerDID: string;
    version: bigint;
    revokedCount: bigint;
    merkleRoot: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RevocationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): RevocationRegistry;
  waitForDeployment(): Promise<this>;

  interface: RevocationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeIssuer: TypedContractMethod<
    [issuerDID: string],
    [void],
    "nonpayable"
  >;

  authorizedIssuers: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  deauthorizeIssuer: TypedContractMethod<
    [issuerDID: string],
    [void],
    "nonpayable"
  >;

  getRevocationList: TypedContractMethod<
    [issuerDID: string],
    [RevocationRegistry.RevocationListStructOutput],
    "view"
  >;

  getRevokedCredentialCount: TypedContractMethod<
    [issuerDID: string],
    [bigint],
    "view"
  >;

  isCredentialRevoked: TypedContractMethod<
    [issuerDID: string, credentialId: string],
    [boolean],
    "view"
  >;

  isCredentialRevokedByHash: TypedContractMethod<
    [issuerHash: BytesLike, credentialHash: BytesLike],
    [boolean],
    "view"
  >;

  issuerDIDs: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  publishRevocationList: TypedContractMethod<
    [
      issuerDID: string,
      credentialHashes: BytesLike[],
      signature: BytesLike,
      merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  revocationLists: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, bigint, string] & {
        timestamp: bigint;
        signature: string;
        version: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;

  revokeCredentials: TypedContractMethod<
    [issuerDID: string, credentialHashes: BytesLike[], signature: BytesLike],
    [void],
    "nonpayable"
  >;

  revokedCredentials: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyRevocationProof: TypedContractMethod<
    [issuerDID: string, credentialHash: BytesLike, merkleProof: BytesLike[]],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeIssuer"
  ): TypedContractMethod<[issuerDID: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedIssuers"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deauthorizeIssuer"
  ): TypedContractMethod<[issuerDID: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRevocationList"
  ): TypedContractMethod<
    [issuerDID: string],
    [RevocationRegistry.RevocationListStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRevokedCredentialCount"
  ): TypedContractMethod<[issuerDID: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "isCredentialRevoked"
  ): TypedContractMethod<
    [issuerDID: string, credentialId: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCredentialRevokedByHash"
  ): TypedContractMethod<
    [issuerHash: BytesLike, credentialHash: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "issuerDIDs"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publishRevocationList"
  ): TypedContractMethod<
    [
      issuerDID: string,
      credentialHashes: BytesLike[],
      signature: BytesLike,
      merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revocationLists"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, bigint, string] & {
        timestamp: bigint;
        signature: string;
        version: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeCredentials"
  ): TypedContractMethod<
    [issuerDID: string, credentialHashes: BytesLike[], signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokedCredentials"
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyRevocationProof"
  ): TypedContractMethod<
    [issuerDID: string, credentialHash: BytesLike, merkleProof: BytesLike[]],
    [boolean],
    "view"
  >;

  getEvent(
    key: "CredentialRevoked"
  ): TypedContractEvent<
    CredentialRevokedEvent.InputTuple,
    CredentialRevokedEvent.OutputTuple,
    CredentialRevokedEvent.OutputObject
  >;
  getEvent(
    key: "IssuerAuthorized"
  ): TypedContractEvent<
    IssuerAuthorizedEvent.InputTuple,
    IssuerAuthorizedEvent.OutputTuple,
    IssuerAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "IssuerDeauthorized"
  ): TypedContractEvent<
    IssuerDeauthorizedEvent.InputTuple,
    IssuerDeauthorizedEvent.OutputTuple,
    IssuerDeauthorizedEvent.OutputObject
  >;
  getEvent(
    key: "RevocationListPublished"
  ): TypedContractEvent<
    RevocationListPublishedEvent.InputTuple,
    RevocationListPublishedEvent.OutputTuple,
    RevocationListPublishedEvent.OutputObject
  >;

  filters: {
    "CredentialRevoked(bytes32,bytes32,string,uint256)": TypedContractEvent<
      CredentialRevokedEvent.InputTuple,
      CredentialRevokedEvent.OutputTuple,
      CredentialRevokedEvent.OutputObject
    >;
    CredentialRevoked: TypedContractEvent<
      CredentialRevokedEvent.InputTuple,
      CredentialRevokedEvent.OutputTuple,
      CredentialRevokedEvent.OutputObject
    >;

    "IssuerAuthorized(bytes32,string,uint256)": TypedContractEvent<
      IssuerAuthorizedEvent.InputTuple,
      IssuerAuthorizedEvent.OutputTuple,
      IssuerAuthorizedEvent.OutputObject
    >;
    IssuerAuthorized: TypedContractEvent<
      IssuerAuthorizedEvent.InputTuple,
      IssuerAuthorizedEvent.OutputTuple,
      IssuerAuthorizedEvent.OutputObject
    >;

    "IssuerDeauthorized(bytes32,string,uint256)": TypedContractEvent<
      IssuerDeauthorizedEvent.InputTuple,
      IssuerDeauthorizedEvent.OutputTuple,
      IssuerDeauthorizedEvent.OutputObject
    >;
    IssuerDeauthorized: TypedContractEvent<
      IssuerDeauthorizedEvent.InputTuple,
      IssuerDeauthorizedEvent.OutputTuple,
      IssuerDeauthorizedEvent.OutputObject
    >;

    "RevocationListPublished(bytes32,string,uint256,uint256,bytes32,uint256)": TypedContractEvent<
      RevocationListPublishedEvent.InputTuple,
      RevocationListPublishedEvent.OutputTuple,
      RevocationListPublishedEvent.OutputObject
    >;
    RevocationListPublished: TypedContractEvent<
      RevocationListPublishedEvent.InputTuple,
      RevocationListPublishedEvent.OutputTuple,
      RevocationListPublishedEvent.OutputObject
    >;
  };
}
