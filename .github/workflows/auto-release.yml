name: Auto Release

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'package.json'
      - 'tsconfig.json'
      - 'contracts/**'

permissions:
  contents: write
  id-token: write
  pull-requests: read

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure Git
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build package
      run: npm run build
    
    - name: Run tests
      run: npm test
    
    - name: Determine version bump type
      id: version_type
      run: |
        # Check commit messages for version bump indicators
        COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
        
        if [[ "$COMMIT_MESSAGE" =~ ^fix:|^bugfix:|^hotfix: ]]; then
          echo "version_type=patch" >> $GITHUB_OUTPUT
          echo "Detected patch version bump"
        elif [[ "$COMMIT_MESSAGE" =~ ^feat:|^feature: ]]; then
          echo "version_type=minor" >> $GITHUB_OUTPUT
          echo "Detected minor version bump"
        elif [[ "$COMMIT_MESSAGE" =~ ^breaking:|BREAKING[[:space:]]CHANGE ]]; then
          echo "version_type=major" >> $GITHUB_OUTPUT
          echo "Detected major version bump"
        else
          # Default to patch for other commits
          echo "version_type=patch" >> $GITHUB_OUTPUT
          echo "Defaulting to patch version bump"
        fi
    
    - name: Check if version bump is needed
      id: check_changes
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        # Check if there are changes since the last tag
        if git diff --quiet $LATEST_TAG HEAD -- src/ contracts/ package.json tsconfig.json; then
          echo "No significant changes detected"
          echo "should_release=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected, proceeding with release"
          echo "should_release=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Bump version
      if: steps.check_changes.outputs.should_release == 'true'
      id: version_bump
      run: |
        # Bump the version based on determined type
        npm version ${{ steps.version_type.outputs.version_type }} --no-git-tag-version
        
        # Get the new version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Commit version bump
      if: steps.check_changes.outputs.should_release == 'true'
      run: |
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ steps.version_bump.outputs.new_version }} [skip ci]"
    
    - name: Create and push tag
      if: steps.check_changes.outputs.should_release == 'true'
      run: |
        git tag -a "v${{ steps.version_bump.outputs.new_version }}" -m "Release v${{ steps.version_bump.outputs.new_version }}"
        git push origin main --follow-tags
    
    - name: Create GitHub Release
      if: steps.check_changes.outputs.should_release == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version_bump.outputs.new_version }}
        name: Release v${{ steps.version_bump.outputs.new_version }}
        generate_release_notes: true
        draft: false
        prerelease: false
    
    - name: Publish to npm
      if: steps.check_changes.outputs.should_release == 'true'
      run: npm publish --provenance --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}